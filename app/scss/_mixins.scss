//sample mix-in add more as needed
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}


%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// Retina image mix-in
// Pass in regular size image in $image1
// Pass in retina size image in $image2
//

@mixin image-2x($image1, $image2, $repeat: no-repeat, $bs-size: cover) {
    background-image: url($image1);
    background-repeat: $repeat;
    background-size: $bs-size;
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx)
  {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image2);
  }
}

// Media breakpoints mixins
// required-  $width:  standard Bootstrap size
// optional-  $type: min or max width -- default is 'min'
//
// Example - if you want a mobile only style write:
// @include media-query('when-xs', max)

$breakpoints: (
 "when-xs" : $screen-xs-min,
 "when-sm" : $screen-sm-min,
 "when-md" : $screen-md-min,
 "when-lg" : $screen-lg-min
);

@mixin media-query ($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
        $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
        @content;
    }
  }
}


/*
@mixin when-xs($rules...) {
  @media (max-width: $screen-xs-max) { $rules }
}
@mixin when-sm($rules...) {
  @media (min-width: $screen-sm-min) { $rules }
}
@mixin when-md($rules...) {
  @media (min-width: $screen-md-min) { $rules }
}
@mixin when-lg($rules...) {
  @media (min-width: $screen-lg-min) { $rules }
} */